#demo/extended_sim.py

import json
from datetime import datetime, timedelta

# Load NPCs (mock multiple NPCs for interaction)
npcs = []
for name in ["Tharam", "Mira"]:
    with open(f"demo/{name.lower()}.json", "r") as f:
        npcs.append(json.load(f))

# Simulation date
today = datetime.today().strftime("%Y-%m-%d")

print(f"--- World Tick: {today} ---\n")

for npc in npcs:
    print(f"NPC: {npc['name']} ({npc['profession']})")
    print(f"  Mood: {npc['mood']}")
    print(f"  Goals: {npc['goals'][0] if npc['goals'] else 'None'}")
    print(f"  State: {npc['state']}")
    print()

# Basic interaction logic: affect relationship if one NPC has strong feelings
# Tharam wants to make peace with Mira
tharam = next(n for n in npcs if n["name"] == "Tharam")
mira = next(n for n in npcs if n["name"] == "Mira")

if "Make peace with Mira" in tharam["goals"]:
    if mira["relationships"].get("Tharam", 50) >= 50:
        # Peace attempt successful
        tharam["relationships"]["Mira"] = min(tharam["relationships"].get("Mira", 50) + 10, 100)
        mira["relationships"]["Tharam"] = min(mira["relationships"].get("Tharam", 50) + 10, 100)
        tharam["memories"].append(f"{today}: Reconciled with Mira")
        tharam["mood"] = "relieved"
        tharam["state"] = "talking to Mira"
        print("Tharam has reconciled with Mira.")
    else:
        # Peace attempt failed
        tharam["relationships"]["Mira"] = max(tharam["relationships"].get("Mira", 50) - 5, 0)
        tharam["memories"].append(f"{today}: Failed to reconcile with Mira")
        tharam["mood"] = "disappointed"
        tharam["state"] = "reflecting"
        print("Tharam failed to reconcile with Mira.")

# Save updated NPCs
for npc in npcs:
    with open(f"demo/{npc['name'].lower()}.json", "w") as f:
        json.dump(npc, f, indent=4)

print("\nNPC states have been updated.")
